#include <fstream>
#include <iostream>
#include <map>
#include <queue>
#include "../Bot.h"
#include "../utilities/predicates.h"
#include "../DependencyAnalyzer.h"
#include "../generated/abilities.h"
#include "../utilities/mappings.h"
#include "../utilities/unit_data_caching.h"
#include "sc2api/sc2_api.h"
#include "sc2utils/sc2_manage_process.h"

using namespace sc2;
using namespace std;

string RaceToString(Race race) {
    switch(race) {
        case Race::Terran:
            return "terran";
        case Race::Protoss:
            return "protoss";
        case Race::Zerg:
            return "zerg";
        default:
            return "unknown";
    }
}

set<UNIT_TYPEID> blacklistedUnits = {
    UNIT_TYPEID::TERRAN_POINTDEFENSEDRONE,
    UNIT_TYPEID::TERRAN_KD8CHARGE,
    UNIT_TYPEID::ZERG_PARASITICBOMBDUMMY,
    UNIT_TYPEID::PROTOSS_DISRUPTORPHASED,
    UNIT_TYPEID::PROTOSS_ORACLESTASISTRAP,
    UNIT_TYPEID::PROTOSS_MOTHERSHIPCORE,
    UNIT_TYPEID::NEUTRAL_FORCEFIELD,
    UNIT_TYPEID::PROTOSS_INTERCEPTOR,
};

void printMappings() {
    ofstream output("bot/python/generated_mappings.py");
    output << "# Generated by build/bin/cache_unit_mappings. Do not edit manually." << endl;
    output << "from collections import namedtuple" << endl;
    output << "Unit = namedtuple('Unit', ['name', 'is_army', 'type_ids', 'race', 'food_delta'])" << endl;

    for (int race = 0; race < 3; race++) {
        map<UNIT_TYPEID, int> mapping;
        vector<vector<UNIT_TYPEID>> units;
        output << RaceToString((Race)race) << "Units" << " = [" << endl;
        for (int k = 0; k < 2; k++) {
            for (auto& t : getUnitTypes()) {
                if (t.race == (Race)race && string(UnitTypeToName(t.unit_type_id)) != "UNKNOWN") {
                    auto ut = canonicalize(t.unit_type_id);

                    if (ut == t.unit_type_id && k == 0) {
                        units.push_back({ut});
                    }
                    if (ut != t.unit_type_id && k == 1) {
                        for (auto& us : units) {
                            if (us[0] == ut) {
                                us.push_back(t.unit_type_id);
                            }
                        }
                    }
                }
            }
        }

        for (int j = 0; j < units.size(); j++) {
            auto& us = units[j];

            output << "   ";
            if (blacklistedUnits.find(us[0]) != blacklistedUnits.end()) output << "# ";
            output << "Unit(\"" << UnitTypeToName(us[0]) << "\", " << (isArmy(us[0]) ? "True" : "False") << ", [";
            for (int i = 0; i < us.size(); i++) {
                if (i > 0) output << ", ";
                output << (int)us[i];
            }
            output << "]";
            output << ", \"" << RaceToString((Race)race) << "\"";
            auto& data = getUnitData(us[0]);
            output << ", " << (data.food_provided - data.food_required);
            output << ")," << endl;
        }
        output << "]" << endl << endl;
    }
}

int main(int argc, char* argv[]) {
    initMappings();
    printMappings();
    return 0;
}